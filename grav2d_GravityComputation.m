%*******************************************************************************
% Function: grav = grav2d_GravityComputation(rect,rho,points)
%
% Purpose:  Computes the gravity generated by a set of rectangles over a set of
%           exterior points
%
% Inputs:   - rect: Five-column matrix containing the geometric definition of
%                   the involved rectangles (in SI units):
%                   - Col. 1: Minimum X coordinate
%                   - Col. 2: Maximum X coordinate
%                   - Col. 3: Minimum Z coordinate, i.e., Z coordinate of the
%                             rectangle's bottom side
%                   - Col. 4: Maximum Z coordinate, i.e., Z coordinate of the
%                             rectangle's top side
%                   - Col. 5: Subrectangles thickness. If a value <=0 is
%                             assigned, the original rectangle is not divided in
%                             subrectangles (if applicable; if a thickness does
%                             not permit to divide the rectangle in an integer
%                             number of parts, the rest subrectangle will be the
%                             shallowest
%           - rho: Scalar or cell array describing the density definition:
%                  - If the value is a scalar, it will be employed as the fixed
%                    density for all rectangles (in this case the possible
%                    subrectangle configuration will not be used)
%                  - If the value is a cell array, it must have the same
%                    elements as the rows has the matrix 'rect'. Each element of
%                    the cell must be a two columns matrix:
%                    - Col. 1: Depth, as positive value, from the surface
%                    - Col. 2: Corresponding density for the depth
%           - points: Two-column matrix containing the attracted points
%                     coordinates:
%                     - Col. 1: X coordinate
%                     - Col. 2: Z coordinate
%                     All points must be outside all prisms
%
% Outputs:  - grav: Column vector of the same length as the row number of
%                   'points' containing (as SI units) the gravity attraction of
%                   all prisms set over each point. The sign convention is such
%                   that for positive density the value is positive downwards
%
% Note: This function does not perform any check about the input arguments
%
% History:  05-07-2018: Function creation
%                       José Luis García Pallero, jgpallero@gmail.com
%*******************************************************************************

function [grav] = grav2d_GravityComputation(rect,rho,points)

%Sizes
nr = size(rect,1);
np = size(points,1);
%Check if the density contrast variable is a scalar or not
if isscalar(rho)
    %In this case the possible subrectangle division has not sense
    rho = ones(nr,1)*rho;
    grav = grav2d_GravityRectangle(rect(:,1:4),rho,points);
elseif iscell(rho)
    %Check if there is any rectangle that will be divided into subrectangles
    sr = sum(rect(:,5)>0.0);
    %Check the two possible cases
    if sr==0
        %Working densities
        wrho = zeros(nr,1);
        %Loop over rectangles
        for i=1:nr
            %The working densities are the corresponding to the surface
            wrho(i) = rho{i}(1,2);
        end
        %Gravity computation
        grav = grav2d_GravityRectangle(rect(:,1:4),wrho,points);
    else
        %Rectangles definition
        aux_rect = [];
        %Loop over all rectangles
        for i=1:nr
            %Rectangle subdivision
            division = grav2d_DivideRectangle(rect(i,1:4),rho{i},rect(i,5));
            aux_rect = [aux_rect;division];
        end
        %Gravity computation
        grav = grav2d_GravityRectangle(aux_rect(:,1:4),aux_rect(:,5),points);
    end
else
    error('The variable ''rho'' must be a scalar or a cell array');
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Copyright (c) 2018, J.L.G. Pallero, jgpallero@gmail.com,
%                    J.L. Fernández Martínez, jlfm@uniovi.es
%                    Z. Fernández Muñiz, zulima@uniovi.es
%                    Sylvain Bonvalot, sylvain.bonvalot@ird.fr
%
%All rights reserved.
%
%Redistribution and use in source and binary forms, with or without
%modification, are permitted provided that the following conditions are met:
%
%- Redistributions of source code must retain the above copyright notice, this
%  list of conditions and the following disclaimer.
%- Redistributions in binary form must reproduce the above copyright notice,
%  this list of conditions and the following disclaimer in the documentation
%  and/or other materials provided with the distribution.
%- Neither the name of the copyright holders nor the names of its contributors
%  may be used to endorse or promote products derived from this software without
%  specific prior written permission.
%
%THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
%ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
%WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
%DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY DIRECT,
%INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
%BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
%DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
%LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
%OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
%ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
