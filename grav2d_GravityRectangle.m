%*******************************************************************************
% Function: grav = grav2d_GravityRectangle(rect,rho,points)
%
% Purpose:  Computes the gravity generated by a set of rectangles over a set of
%           exterior points. This function is called internally by
%           grav2d_GravityComputation.m
%
% Inputs:   - rect: Five-column matrix containing the geometric definition of
%                   the involved rectangles (in SI units):
%                   - Col. 1: Minimum X coordinate
%                   - Col. 2: Maximum X coordinate
%                   - Col. 3: Minimum Z coordinate, i.e., Z coordinate of the
%                             rectangle's bottom side
%                   - Col. 4: Maximum Z coordinate, i.e., Z coordinate of the
%                             rectangle's top side
%           - rho: Column vector of length equal to rows in 'rect' containing
%                  each element the density of the correspondent rectangle
%           - points: Two-column matrix containing the attracted points
%                     coordinates:
%                     - Col. 1: X coordinate
%                     - Col. 2: Z coordinate
%                     All points must be outside all prisms
%
% Outputs:  - grav: Column vector of the same length as the row number of
%                   'points' containing (as SI units) the gravity attraction of
%                   all prisms set over each point. The sign convention is such
%                   that for positive density the value is positive downwards
%
% Note 1: This function does not perform any check about the input arguments
% Note 2: The used formulation can be shown in
%         Telford et al., 1976, "Applied Geophysics", Cambridge University Press
%         or in
%         V.C.F. Barbosa and J.B.C. Silva, 1994, Generalized compact gravity
%         inversion. Geophysics, 59(1), pp.57-68. DOI: 10.1190/1.1443534
%
% History:  09-07-2018: Function creation
%                       José Luis García Pallero, jgpallero@gmail.com
%*******************************************************************************

function [grav] = grav2d_GravityRectangle(rect,rho,points)

%Gravity constant (in SI units)
%https://physics.nist.gov/cgi-bin/cuu/Value?bg|search_for=universal_in!
G = 6.67408e-11;
%Auxiliary vectors
nr = size(rect,1);
p1 = zeros(nr,1);
p2 = zeros(nr,1);
p3 = zeros(nr,1);
p4 = zeros(nr,1);
%Number of attracted points
np = size(points,1);
%Output vector
grav = zeros(np,1);
%Loop through all points
for i=1:np
    %Working point coordinates
    xpt = points(i,1);
    zpt = points(i,2);
    %Constants for the attraction formula
    A = xpt-rect(:,1);
    B = xpt-rect(:,2);
    C = zpt-rect(:,4);
    D = zpt-rect(:,3);
    %Squared constants
    A2 = A.^2;
    B2 = B.^2;
    C2 = C.^2;
    D2 = D.^2;
    %Set to zero the auxiliary vectors
    p1(:) = 0.0;
    p2(:) = 0.0;
    p3(:) = 0.0;
    p4(:) = 0.0;
    %Rectangles with width or thickness equal 0, which doesn't produce signal
    dim0 = (rect(:,1)==rect(:,2))|(rect(:,4)==rect(:,3));
    %Singular cases A==0 and C==0 or A==0 and D==0, and p1 computation
    a0c0 = dim0|((A==0.0)&(C==0.0))|((A==0.0)&(D==0.0));
    p1(~a0c0) = A(~a0c0).*log((A2(~a0c0)+D2(~a0c0))./(A2(~a0c0)+C2(~a0c0)));
    %Singular cases B==0 and C==0 or B==0 and D==0, and p2 computation
    b0c0 = dim0|((B==0.0)&(C==0.0))|((B==0.0)&(D==0.0));
    p2(~b0c0) = B(~b0c0).*log((B2(~b0c0)+D2(~b0c0))./(B2(~b0c0)+C2(~b0c0)));
    %Singular cases D==0, and p3 computation
    d0 = dim0|(D==0.0);
    p3(~d0) = 2.0*D(~d0).*(atan(A(~d0)./D(~d0))-atan(B(~d0)./D(~d0)));
    %Singular cases C==0, and p4 computation
    c0 = dim0|(C==0.0);
    p4(~c0) = 2.0*C(~c0).*(atan(A(~c0)./C(~c0))-atan(B(~c0)./C(~c0)));
    %All parts stacking
    kernel = p1-p2+p3-p4;
    %Final gravity
    grav(i) = G*sum(kernel.*rho);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Copyright (c) 2018, J.L.G. Pallero, jgpallero@gmail.com,
%                    J.L. Fernández Martínez, jlfm@uniovi.es
%                    Z. Fernández Muñiz, zulima@uniovi.es
%                    Sylvain Bonvalot, sylvain.bonvalot@ird.fr
%
%All rights reserved.
%
%Redistribution and use in source and binary forms, with or without
%modification, are permitted provided that the following conditions are met:
%
%- Redistributions of source code must retain the above copyright notice, this
%  list of conditions and the following disclaimer.
%- Redistributions in binary form must reproduce the above copyright notice,
%  this list of conditions and the following disclaimer in the documentation
%  and/or other materials provided with the distribution.
%- Neither the name of the copyright holders nor the names of its contributors
%  may be used to endorse or promote products derived from this software without
%  specific prior written permission.
%
%THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
%ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
%WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
%DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY DIRECT,
%INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
%BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
%DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
%LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
%OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
%ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
